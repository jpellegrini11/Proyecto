<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
	xmlns:ui="http://java.sun.com/jsf/facelets"
	xmlns:f="http://java.sun.com/jsf/core"
	xmlns:h="http://java.sun.com/jsf/html"
	xmlns:p="http://primefaces.org/ui">
	
	


<h:head>


  <f:facet name="first">
            <meta http-equiv="X-UA-Compatible" content="IE=edge" />
            <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
            <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0" />
            
            <meta name="apple-mobile-web-app-capable" content="yes" />
<!--             <meta name="google-signin-client_id" content="203313346214-m87aj8qg5najegkdjol27rvd4df6rhqq.apps.googleusercontent.com"/> -->
</f:facet>
      
        <title>SGE - Login</title>
        
        <h:outputScript name="jquery/jquery.js" library="primefaces"/>
        <h:outputScript name="jquery/jquery-plugins.js" library="primefaces"/>

        <h:outputScript name="inputswitch/inputswitch.js" library="showcase" />
        <h:outputScript name="css/core.js" library="showcase"/>
        <h:outputScript name="css/components.js" library="showcase"/>
        
        <link href="#{resource['showcase/images/logoNavB.svg']}" rel="icon" type="image/svg" sizes="32x32"/>
        <link href="#{resource['showcase/images/logoNav3.svg']}" rel="icon" type="image/svg" sizes="16x16"/>
        
<!--         <script src="https://apis.google.com/js/platform.js" async="defer" ></script> -->
        <script src="https://www.gstatic.com/firebasejs/7.20.0/firebase.js"></script>


	<h:outputScript name="script/nanoscroller.js" library="showcase" />
	<h:outputScript name="script/layout.js" library="showcase" />
	<h:outputScript name="schedule/schedule.js" library="showcase" />
	
<script type="text/javascript">



window.onpopstate = function() { 
	window.location.reload();
}; history.pushState({}, ''); 


window.onload = function() {
	
	 var email;
// 	document.getElementById('btn1').onclick;
	var firebaseConfig = {
		    apiKey: "AIzaSyCCRn3mef1T_iQ1vjcFVbvwxsOi3lJXM6g",
		    authDomain: "aug-bot.firebaseapp.com",
		    databaseURL: "https://aug-bot.firebaseio.com",
		    projectId: "aug-bot",
		    storageBucket: "aug-bot.appspot.com",
		    messagingSenderId: "203313346214",
		    appId: "1:203313346214:web:e5e8072afc22ed4d072667"
		  };
		  // Initialize Firebase
		  firebase.initializeApp(firebaseConfig);
   		  initApp();
  };

   function initApp() {
      // Listening for auth state changes.
      // [START authstatelistener]
      firebase.auth().onAuthStateChanged(function(user) {
        // [START_EXCLUDE silent]
/*         document.getElementById('quickstart-verify-email').disabled = true; */ 
      
  // [END_EXCLUDE]
        if (user) {
          // User is signed in.
          var displayName = user.displayName;
          email = user.email;
          var emailVerified = user.emailVerified;
          var photoURL = user.photoURL;
          var isAnonymous = user.isAnonymous;
          var uid = user.uid;
          var providerData = user.providerData;
          
          console.log(displayName);
          console.log(email);
          console.log(uid);
          console.log(providerData);
//           signOut2();
//           increment2(email);
   
        
          // [START_EXCLUDE]

          if (!emailVerified) {
        	  console.log('usuario emailVerified');
        	 
            /* document.getElementById('quickstart-verify-email').disabled = false; */
          }
          // [END_EXCLUDE]
        } else {
          // User is signed out.
          // [START_EXCLUDE]
			console.log('usuario desconectado');
          // [END_EXCLUDE]
        }
        
        	
            
        
        // [START_EXCLUDE silent]
        
       /*  document.getElementById('quickstart-sign-in').disabled = false; */
        // [END_EXCLUDE]
      });
      // [END authstatelistener]


    }

   function signOut2() {
			
 		console.log('entro signOut');
             if (firebase.auth().currentUser) {
   		          	       
     	        firebase.auth().signOut();
     	        location.reload();
     	      }
             }; 
            
	
	 
         function increment2(value,value2) {
             console.log('emtro incrm');
//  	   increment3([{name:'valor3', value}]);
             increment3([{name:'pUsu', value:value}])
             
             
 }
         function signOut2() {
         firebase.auth().signOut().then(function() {
        	  // Sign-out successful.
        	 console.log('usuario desconectado');
        	 
        	}).catch(function(error) {
        	  // An error happened.
          	  
        	});
         }
     	
                      
                   function signInWithPopup2() {
                	   
                   var provider = new firebase.auth.GoogleAuthProvider();

                   firebase.auth().signInWithPopup(provider).then(function(result) {
                	   // This gives you a Google Access Token. You can use it to access the Google API.
                	   var token = result.credential.accessToken;
                	   // The signed-in user info.
                	   console.log(token);
                	   var user = result.user;

                	   firebase.auth().currentUser.getIdToken(true).then(function(token) {
                		   // Send token to your backend via HTTPS
                		   // ...
                		   increment2(token);
                		   
                		 }).catch(function(error) {
                		   // Handle error
                		 });
              		 
                	  
                 	  
                	 }).catch(function(error) {
                	   // Handle Errors here.
                	   var errorCode = error.code;
                	   var errorMessage = error.message;
                	   // The email of the user's account used.
                	   var email = error.email;
                	   // The firebase.auth.AuthCredential type that was used.
                	   var credential = error.credential;
                	   // ...
                	 });
                   }

              


                  
                
</script>


             
          
 
        </h:head>


        <h:body class="login-body">

       
        
        
         
         
        <h:form id="f1">
               
        <div class="login-topbar">
        
<h:graphicImage value="/resources/showcase/images/logoSGE6.svg"></h:graphicImage>

            <span class="app-title"></span>
        </div>
        
        <div class="login-panel">
        
            <h1>
            <p:outputLabel value="#{login.titulo}" style="#{login.colorLinkTit}">
            
             </p:outputLabel>
            </h1>
          
            <p>
            <p:outputLabel value="#{login.subTitulo}" rendered="#{login.bolSubTitulo}">
            
             </p:outputLabel>
           </p>
            <div>. 
            </div>
			
			<p:panel rendered="#{login.bolPanelLog}"  style="background-color:#ffffff00;border:transparent;">
			
			<p:commandLink id="btnlogin1" actionListener="#{login.btnLogActiv()}" onclick="signInWithPopup2()" rendered="#{login.btnAcceso1}" update="@form" >
			
			<h:graphicImage
					value="/resources/showcase/images/icons/google.png" width="50px" height="50px" ></h:graphicImage>
					
			</p:commandLink>
			
			
     <p:separator style="border:transparent"></p:separator>
			

        

        
		</p:panel>
				
			
			<p:panel rendered="#{login.bolPanelReg}"  style="background-color:#ffffff00;border:transparent;">
			
			<p:commandLink id="btnlogin2" actionListener="#{login.btnRegActiv()}"  onclick="signInWithPopup2()" rendered="#{login.btnAcceso2}" onstart="this.disabled=true;">
			<h:graphicImage
					value="/resources/showcase/images/icons/google.png" width="50px" height="50px"></h:graphicImage>
			</p:commandLink>
			
			                      <p:separator style="border:transparent"></p:separator>
			<h:selectOneMenu value="#{login.perfil}" label="Perfil">
        <f:selectItem itemLabel="DEPORTISTA" itemValue="DEPORTISTA" />
        <f:selectItem itemLabel="ENTRENADOR" itemValue="ENTRENADOR" />
        	
        	
     </h:selectOneMenu>
     <p:separator style="border:transparent;"></p:separator>
            <p:commandButton value="Registrar" action="#{login.btnRegistrar()}"  disabled="#{login.btnRegistrar}" style="color:grey;" update="@form">
            <p:autoUpdate/>
            </p:commandButton>
			

        

        
		</p:panel>
			<!--             <p:outputLabel for="username" id="username" value="#{login.val}" style="color:red;font-size:17px;font-weight: bold;"> </p:outputLabel> -->
<!--             <p:inputText id="email" type="text" name="email"> </p:inputText> -->
            
<!--             <label for="password">Password</label> -->
<!--             <p:inputText id="password" type="password" name="password" value="" /> -->

            <div class="remember-me">
            
          
            </div>
            <p:commandLink id="btn1"  action="#{login.linkLogin()}"  style="#{login.colorLinkLog}" update="@form" >Login   /</p:commandLink>
            <p:commandLink  id="btn2" action="#{login.linkRegistro()}"  style="#{login.colorLinkReg}" update="@form" >   Registro</p:commandLink>
            
<!--             <p:commandButton value="Login" onclick="toggleSignIn()"  class="ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only" > -->
<!--             <span class="ui-button-text ui-c"></span></p:commandButton> -->
        </div>
       

         	
         	<p:growl id="growl" for="growl" showDetail="true" sticky="true" >  
				<p:autoUpdate />
				 </p:growl>
</h:form>

 

<h:form id="f2"> 
            	
		                                                                                                          
<p:remoteCommand name="increment3" action="#{login.increment}" update="@this,:f1:growl"/>
<p:remoteCommand name="buscarU" action="#{login.buscarU}"/>

</h:form>
	<h:outputStylesheet name="css/layout.css" library="showcase" />
	<h:outputStylesheet name="schedule/schedule.css" library="showcase" />
    <h:outputStylesheet name="css/sh.css" library="showcase" />
	<h:outputStylesheet name="css/nanoscroller.css" library="showcase" />
	<h:outputStylesheet name="css/primeflex.css" library="showcase" />
	<h:outputStylesheet name="css/layout-blue-orange.css" library="showcase" />
    <h:outputStylesheet name="inputswitch/inputswitch.css" library="showcase" />
    <h:outputStylesheet name="css/theme.css" library="showcase" />
    <h:outputStylesheet name="css/components.css" library="showcase" />
	<!-- For Community Themes except 'Luna' and 'Nova' theme -->
	<h:outputStylesheet name="primeicons/primeicons.css" library="primefaces" />
	<h:outputStylesheet name="css/charts.css" library="showcase" />
 
   <style type="text/css">   
                   
                   .ui-growl {
   
    right: 10px;
    width: 241px;
}
      
  body .ui-widget, body .ui-widget .ui-widget {
                	    color: white;
                	}
              	

body .ui-panel .ui-panel-content {

    background-color: #ffffff00;
 
}
.ui-widget {
    
    font-size: 12px;
}
        
            </style>
  </h:body>

</html>